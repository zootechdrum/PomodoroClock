class App extends React.Component {
  state = {
    timer: false,
    breakStatus: false,
    breakLength: 0,
    time: 1500,
    setTime: 1500
  };

  //function that onCLick start countdown
  pressToStart = () => {
    this.setState({ timer: !this.state.timer });
    //This needs to be false because the above code does
    // execute immediatly so this.state.time will still be false in this function
    if (this.state.timer === false) {
      this.runTime = setInterval(this.startCountDown, 1000);
    } else {
      clearInterval(this.runTime);
    }
  };

  //Clock starts to countdown
  startCountDown = () => {
    //checks if time is 0 and if break is false to change time === to breaklength
    if (this.state.time === 0 && this.state.breakStatus === false) {
      this.setState(prevState => {
        return {
          breakStatus: !this.state.breakStatus,
          //added 1 to show the acutal number held in state
          //if you do not add 1 it will subtract 1 from state to quickly
          time: prevState.breakLength + 1
        };
      });
      //Below if statement checks if timer time should be set to time
    } else if (this.state.time === 0 && this.state.breakStatus === true) {
      this.setState({
        breakStatus: !this.state.breakStatus,
        //added 1 to show the acutal number held in state
        //if you do not add 1 it will subtract 1 from state to quickly
        time: this.state.setTime + 1
      });
    }

    if (this.state.timer) {
      this.setState(prevState => {
        return { time: prevState.time - 1 };
      });
    }
  };
  //stops the timer on stop button
  pressToStop = () => {
    this.setState({ timer: false });
    clearInterval(this.runTime);
  };

  reset = () => {
    this.pressToStop();

    this.setState({
      timer: false,
      time: 1500,
      breakLength: 300
    });
  };

  addMinute = type => {
    if (this.state.time >= 60) {
      this.setState(prevState => {
        return {
          time:
            type == "addMinute"
              ? prevState.setTime + 60
              : prevState.setTime - 60
        };
      });
    }
    if (this.state.time < 60) {
      this.setState(prevState => {
        return {
          time:
            type === "addMinute" ? prevState.setTime + 60 : prevState.setTime
        };
      });
    }
    this.setState(prevState => {
      return { setTime: prevState.time };
    });
  };

  //Controls the minutes in counter by adding or decreasing 60 seconds.
  breakMinute = type => {
    if (this.state.breakLength <= 60) {
      this.setState(prevState => {
        return {
          breakLength:
            type == "add" ? prevState.breakLength + 60 : prevState.breakLength
        };
      });
    }
    if (this.state.breakLength > 60) {
      this.setState(prevState => {
        return {
          breakLength:
            type === "add"
              ? prevState.breakLength + 60
              : prevState.breakLength - 60
        };
      });
    }
  };

  //formats the time to 00:00 format
  formatTime = time => {
    let minutes = Math.floor(time / 60);
    let seconds = time - minutes * 60;

    //formats the time to be in 00:00 format
    minutes = minutes < 10 ? "0" + minutes : minutes;
    seconds = seconds < 10 ? "0" + seconds : seconds;

    return minutes + ":" + seconds;
  };

  render() {
    return (
      <div className="container">
        <div className="pomoClock_container">
          <div class="pomo-item">
            <Break
              breakMinute={this.breakMinute}
              breakLength={this.formatTime(this.state.breakLength)}
            />
          </div>
          <div class="pomo-item">
            <StartandStop
              pressToStart={this.pressToStart}
              pressToStop={this.pressToStop}
              reset={this.reset}
            />
          </div>
          <div class="pomo-item">
          <MinuteController addMinute={this.addMinute} />
          </div>
        </div>
          <div class="display_time">
          <DisplayTime
            time={this.state.time}
            showTime={this.formatTime(this.state.time)}
          />
        </div>
      </div>
    );
  }
}
//Component for the break session
class Break extends React.Component {
  render() {
    return (
      <div className="text-center breakSession_container">
        <h2>Break Session</h2>
        <div className="breakSession_btns">
          <button 
            onClick={() => this.props.breakMinute("add")}
            className="breakSession_btn_add btn btn-info"
            id="break-increment"
          >
            +
          </button>
          <button 
            onClick={() => this.props.breakMinute("sub")}
            className="breakSession_btn_sub btn btn-light"
            id="break-decrement"
          >
            -
          </button>
        </div>
        <div id="break-label"> Sessions: {this.props.breakLength.slice(0,2)}</div>
      </div>
    );
  }
}

class MinuteController extends React.Component {
  render() {
    return (
      <div id="add_sub_buttons">
        <button class="btn btn-primary" onClick={() => this.props.addMinute("addMinute")}>add </button>
        <button class="btn btn-warning"  onClick={() => this.props.addMinute("subtract")}>
          {" "}
          Subtract{" "}
        </button>
      </div>
    );
  }
}

class StartandStop extends React.Component {
  render() {
    return (
      <div id="buttonOptions">
        <button class="btn btn-primary"  onClick={this.props.pressToStart}>Start</button>
        <button class="btn btn-warning" onClick={this.props.pressToStop}>Stop</button>
        <button class="btn btn-secondary" onClick={this.props.reset}>Reset</button>
      </div>
    );
  }
}

//shows the actual time starting at 25:00
class DisplayTime extends React.Component {
  render() {
    return (
      <div>
        <h1 id="time">{this.props.showTime}</h1>
      </div>
    );
  }
}

ReactDOM.render(<App />, document.querySelector("#root"));
